{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"x post action \u2042 github action that creates a post on x.com. \u2b50 star this repo if you find it useful! this action allows you to automatically post messages to x from your github workflow. it can be used to announce new releases, share updates, or integrate your github workflow with x communities. quick links \u2042 description features inputs outputs example usage how it works setting up x api credentials development contributing example usage \u2042 name: post to x on: release: types: [published] jobs: post: runs-on: ubuntu-latest steps: - name: post to x uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'new release ${{ github.event.release.tag_name }} is now available!' community-id: '123456789'","title":"home"},{"location":"#x-post-action","text":"github action that creates a post on x.com. \u2b50 star this repo if you find it useful! this action allows you to automatically post messages to x from your github workflow. it can be used to announce new releases, share updates, or integrate your github workflow with x communities.","title":"x post action"},{"location":"#quick-links","text":"description features inputs outputs example usage how it works setting up x api credentials development contributing","title":"quick links"},{"location":"#example-usage","text":"name: post to x on: release: types: [published] jobs: post: runs-on: ubuntu-latest steps: - name: post to x uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'new release ${{ github.event.release.tag_name }} is now available!' community-id: '123456789'","title":"example usage"},{"location":"credentials/","text":"\ud83d\udd11 setting up x api credentials \u2042 to use the x post action, you'll need to set up a developer account and create an app on x. step 1: create a developer account \u2042 go to the x developer portal sign in with your x account apply for a developer account if you don't already have one step 2: create a new app \u2042 in the developer portal, navigate to \"projects & apps\" click \"create app\" fill in the required information about your app set the app permissions to \"read and write\" step 3: generate access tokens \u2042 from your app's dashboard, navigate to the \"keys and tokens\" tab generate consumer keys (app key and app secret) generate access token and access token secret step 4: add credentials to github secrets \u2042 in your github repository, go to settings > secrets and variables > actions click \"new repository secret\" add the following secrets: X_APP_KEY : your app key X_APP_SECRET : your app secret X_ACCESS_TOKEN : your access token X_ACCESS_SECRET : your access token secret step 5: use secrets in your workflow \u2042 reference the secrets in your workflow file: - name: post to x uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'hello from github actions!' troubleshooting credentials \u2042 if you encounter authentication issues: verify that all four credentials are correctly stored in github secrets ensure your app has \"read and write\" permissions check that your access tokens haven't expired make sure your developer account is in good standing verify that you haven't exceeded rate limits","title":"setting up x api credentials"},{"location":"credentials/#setting-up-x-api-credentials","text":"to use the x post action, you'll need to set up a developer account and create an app on x.","title":"\ud83d\udd11 setting up x api credentials"},{"location":"credentials/#step-1-create-a-developer-account","text":"go to the x developer portal sign in with your x account apply for a developer account if you don't already have one","title":"step 1: create a developer account"},{"location":"credentials/#step-2-create-a-new-app","text":"in the developer portal, navigate to \"projects & apps\" click \"create app\" fill in the required information about your app set the app permissions to \"read and write\"","title":"step 2: create a new app"},{"location":"credentials/#step-3-generate-access-tokens","text":"from your app's dashboard, navigate to the \"keys and tokens\" tab generate consumer keys (app key and app secret) generate access token and access token secret","title":"step 3: generate access tokens"},{"location":"credentials/#step-4-add-credentials-to-github-secrets","text":"in your github repository, go to settings > secrets and variables > actions click \"new repository secret\" add the following secrets: X_APP_KEY : your app key X_APP_SECRET : your app secret X_ACCESS_TOKEN : your access token X_ACCESS_SECRET : your access token secret","title":"step 4: add credentials to github secrets"},{"location":"credentials/#step-5-use-secrets-in-your-workflow","text":"reference the secrets in your workflow file: - name: post to x uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'hello from github actions!'","title":"step 5: use secrets in your workflow"},{"location":"credentials/#troubleshooting-credentials","text":"if you encounter authentication issues: verify that all four credentials are correctly stored in github secrets ensure your app has \"read and write\" permissions check that your access tokens haven't expired make sure your developer account is in good standing verify that you haven't exceeded rate limits","title":"troubleshooting credentials"},{"location":"description/","text":"\ud83d\udcdd description \u2042 this action allows you to automatically post messages to x from your github workflow. it can be used to announce new releases, share updates, or integrate your github workflow with x communities. what it does \u2042 the x post action simplifies the process of posting to x (formerly twitter) directly from your github workflows. using the twitter api v2, this action enables automated social media updates whenever significant events occur in your repository. use cases \u2042 announce new software releases with version information share project updates, milestones and achievements notify your audience about bug fixes and important patches build an engaged community around your open source project integrate your development pipeline with social media outreach","title":"description"},{"location":"description/#description","text":"this action allows you to automatically post messages to x from your github workflow. it can be used to announce new releases, share updates, or integrate your github workflow with x communities.","title":"\ud83d\udcdd description"},{"location":"description/#what-it-does","text":"the x post action simplifies the process of posting to x (formerly twitter) directly from your github workflows. using the twitter api v2, this action enables automated social media updates whenever significant events occur in your repository.","title":"what it does"},{"location":"description/#use-cases","text":"announce new software releases with version information share project updates, milestones and achievements notify your audience about bug fixes and important patches build an engaged community around your open source project integrate your development pipeline with social media outreach","title":"use cases"},{"location":"example-usage/","text":"\ud83d\ude80 example usage \u2042 below are examples of how to use the x post action in your github workflows. basic example \u2042 the simplest way to use the action is to post a static message: name: post to x on: workflow_dispatch: # manually triggered jobs: post: runs-on: ubuntu-latest steps: - name: post to x uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'hello from github actions!' announce new releases \u2042 automatically post when a new release is published: name: announce release on: release: types: [published] jobs: post: runs-on: ubuntu-latest steps: - name: post to x uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'new release ${{ github.event.release.tag_name }} is now available! check it out at ${{ github.event.release.html_url }}' community-id: '123456789' # optional: post to a specific community post on schedule \u2042 create scheduled posts using cron: name: weekly update on: schedule: - cron: '0 12 * * 1' # every monday at noon UTC jobs: post: runs-on: ubuntu-latest steps: - name: checkout code uses: actions/checkout@v2 - name: get stats id: stats run: | echo \"::set-output name=stars::$(curl -s https://api.github.com/repos/${{ github.repository }} | jq .stargazers_count)\" - name: post to x uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'weekly update: our project now has ${{ steps.stats.outputs.stars }} stars! thank you for your support.' post on successful build \u2042 post when continuous integration succeeds: name: build and post on: push: branches: [main] jobs: build: runs-on: ubuntu-latest steps: - name: checkout code uses: actions/checkout@v2 - name: build project run: npm ci && npm run build - name: test project run: npm test - name: post to x if: success() uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'build successful for commit ${{ github.sha }} on branch ${{ github.ref_name }}. all tests passed! \u2705'","title":"example usage"},{"location":"example-usage/#example-usage","text":"below are examples of how to use the x post action in your github workflows.","title":"\ud83d\ude80 example usage"},{"location":"example-usage/#basic-example","text":"the simplest way to use the action is to post a static message: name: post to x on: workflow_dispatch: # manually triggered jobs: post: runs-on: ubuntu-latest steps: - name: post to x uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'hello from github actions!'","title":"basic example"},{"location":"example-usage/#announce-new-releases","text":"automatically post when a new release is published: name: announce release on: release: types: [published] jobs: post: runs-on: ubuntu-latest steps: - name: post to x uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'new release ${{ github.event.release.tag_name }} is now available! check it out at ${{ github.event.release.html_url }}' community-id: '123456789' # optional: post to a specific community","title":"announce new releases"},{"location":"example-usage/#post-on-schedule","text":"create scheduled posts using cron: name: weekly update on: schedule: - cron: '0 12 * * 1' # every monday at noon UTC jobs: post: runs-on: ubuntu-latest steps: - name: checkout code uses: actions/checkout@v2 - name: get stats id: stats run: | echo \"::set-output name=stars::$(curl -s https://api.github.com/repos/${{ github.repository }} | jq .stargazers_count)\" - name: post to x uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'weekly update: our project now has ${{ steps.stats.outputs.stars }} stars! thank you for your support.'","title":"post on schedule"},{"location":"example-usage/#post-on-successful-build","text":"post when continuous integration succeeds: name: build and post on: push: branches: [main] jobs: build: runs-on: ubuntu-latest steps: - name: checkout code uses: actions/checkout@v2 - name: build project run: npm ci && npm run build - name: test project run: npm test - name: post to x if: success() uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'build successful for commit ${{ github.sha }} on branch ${{ github.ref_name }}. all tests passed! \u2705'","title":"post on successful build"},{"location":"features/","text":"\u2728 features \u2042 key features \u2042 automated posting : publish updates to x directly from your github workflows community integration : post to specific x communities to reach targeted audiences release announcements : automatically announce new releases with version information customizable messages : fully customize your post content with repository information and event data secure credential handling : uses github secrets for secure api credential management easy configuration : simple yaml-based setup with minimal configuration required technical highlights \u2042 built with node.js for reliable performance uses the official twitter api v2 client comprehensive test coverage with jest integration tests for real-world scenario validation MIT licensed for maximum flexibility","title":"features"},{"location":"features/#features","text":"","title":"\u2728 features"},{"location":"features/#key-features","text":"automated posting : publish updates to x directly from your github workflows community integration : post to specific x communities to reach targeted audiences release announcements : automatically announce new releases with version information customizable messages : fully customize your post content with repository information and event data secure credential handling : uses github secrets for secure api credential management easy configuration : simple yaml-based setup with minimal configuration required","title":"key features"},{"location":"features/#technical-highlights","text":"built with node.js for reliable performance uses the official twitter api v2 client comprehensive test coverage with jest integration tests for real-world scenario validation MIT licensed for maximum flexibility","title":"technical highlights"},{"location":"how-it-works/","text":"\u2699\ufe0f how it works \u2042 architecture \u2042 the x post action uses the twitter api v2 (via the twitter-api-v2 npm package) to post messages to x. when your github workflow runs, the action: authenticates with the x api using your credentials creates a new post with your specified message optionally associates the post with a community returns the post id for further processing supported features \u2042 posting text messages to your x account posting to a specific x community (optional) returning the post id for further processing technical details \u2042 the action is built with node.js and uses the following core components: @actions/core : core functions for github actions @actions/github : github actions toolkit twitter-api-v2 : twitter api v2 client for node.js the action is compiled using @vercel/ncc to create a single javascript file with all dependencies included, making it fast and reliable to use in your workflows. error handling \u2042 the action implements comprehensive error handling to: validate all required inputs provide clear error messages if the api request fails report detailed diagnostic information for troubleshooting gracefully handle rate limiting and other api restrictions","title":"how it works"},{"location":"how-it-works/#how-it-works","text":"","title":"\u2699\ufe0f how it works"},{"location":"how-it-works/#architecture","text":"the x post action uses the twitter api v2 (via the twitter-api-v2 npm package) to post messages to x. when your github workflow runs, the action: authenticates with the x api using your credentials creates a new post with your specified message optionally associates the post with a community returns the post id for further processing","title":"architecture"},{"location":"how-it-works/#supported-features","text":"posting text messages to your x account posting to a specific x community (optional) returning the post id for further processing","title":"supported features"},{"location":"how-it-works/#technical-details","text":"the action is built with node.js and uses the following core components: @actions/core : core functions for github actions @actions/github : github actions toolkit twitter-api-v2 : twitter api v2 client for node.js the action is compiled using @vercel/ncc to create a single javascript file with all dependencies included, making it fast and reliable to use in your workflows.","title":"technical details"},{"location":"how-it-works/#error-handling","text":"the action implements comprehensive error handling to: validate all required inputs provide clear error messages if the api request fails report detailed diagnostic information for troubleshooting gracefully handle rate limiting and other api restrictions","title":"error handling"},{"location":"inputs/","text":"\ud83d\udce5 inputs \u2042 the x post action accepts the following inputs: input description required default appKey the x api app key yes - appSecret the x api app secret yes - accessToken the x api access token yes - accessSecret the x api access secret yes - message the message to post to x yes 'Hello, world!' community-id the id of the community to post to no null input details \u2042 api credentials \u2042 the four credential inputs ( appKey , appSecret , accessToken , accessSecret ) are required to authenticate with the x api. for security, these should be stored as secrets in your github repository. learn more about setting up x api credentials . message \u2042 the message input defines the content of your x post. this can be customized with dynamic content from your github workflow, such as: release version numbers commit information repository data custom messages community-id \u2042 the optional community-id parameter allows you to post directly to a specific x community. if not provided, the post will appear on your main timeline only.","title":"inputs"},{"location":"inputs/#inputs","text":"the x post action accepts the following inputs: input description required default appKey the x api app key yes - appSecret the x api app secret yes - accessToken the x api access token yes - accessSecret the x api access secret yes - message the message to post to x yes 'Hello, world!' community-id the id of the community to post to no null","title":"\ud83d\udce5 inputs"},{"location":"inputs/#input-details","text":"","title":"input details"},{"location":"inputs/#api-credentials","text":"the four credential inputs ( appKey , appSecret , accessToken , accessSecret ) are required to authenticate with the x api. for security, these should be stored as secrets in your github repository. learn more about setting up x api credentials .","title":"api credentials"},{"location":"inputs/#message","text":"the message input defines the content of your x post. this can be customized with dynamic content from your github workflow, such as: release version numbers commit information repository data custom messages","title":"message"},{"location":"inputs/#community-id","text":"the optional community-id parameter allows you to post directly to a specific x community. if not provided, the post will appear on your main timeline only.","title":"community-id"},{"location":"license/","text":"Creative Commons Legal Code \u2042 CC0 1.0 Universal \u2042 CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED HEREUNDER. Statement of Purpose \u2042 The laws of most jurisdictions throughout the world automatically confer exclusive Copyright and Related Rights (defined below) upon the creator and subsequent owner(s) (each and all, an \"owner\") of an original work of authorship and/or a database (each, a \"Work\"). Certain owners wish to permanently relinquish those rights to a Work for the purpose of contributing to a commons of creative, cultural and scientific works (\"Commons\") that the public can reliably and without fear of later claims of infringement build upon, modify, incorporate in other works, reuse and redistribute as freely as possible in any form whatsoever and for any purposes, including without limitation commercial purposes. These owners may contribute to the Commons to promote the ideal of a free culture and the further production of creative, cultural and scientific works, or to gain reputation or greater distribution for their Work in part through the use and efforts of others. For these and/or other purposes and motivations, and without any expectation of additional consideration or compensation, the person associating CC0 with a Work (the \"Affirmer\"), to the extent that he or she is an owner of Copyright and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and publicly distribute the Work under its terms, with knowledge of his or her Copyright and Related Rights in the Work and the meaning and intended legal effect of CC0 on those rights. Copyright and Related Rights. A Work made available under CC0 may be protected by copyright and related or neighboring rights (\"Copyright and Related Rights\"). Copyright and Related Rights include, but are not limited to, the following: i. the right to reproduce, adapt, distribute, perform, display, communicate, and translate a Work; ii. moral rights retained by the original author(s) and/or performer(s); iii. publicity and privacy rights pertaining to a person's image or likeness depicted in a Work; iv. rights protecting against unfair competition in regards to a Work, subject to the limitations in paragraph 4(a), below; v. rights protecting the extraction, dissemination, use and reuse of data in a Work; vi. database rights (such as those arising under Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, and under any national implementation thereof, including any amended or successor version of such directive); and vii. other similar, equivalent or corresponding rights throughout the world based on applicable law or treaty, and any national implementations thereof. Waiver. To the greatest extent permitted by, but not in contravention of, applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and unconditionally waives, abandons, and surrenders all of Affirmer's Copyright and Related Rights and associated claims and causes of action, whether now known or unknown (including existing as well as future claims and causes of action), in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each member of the public at large and to the detriment of Affirmer's heirs and successors, fully intending that such Waiver shall not be subject to revocation, rescission, cancellation, termination, or any other legal or equitable action to disrupt the quiet enjoyment of the Work by the public as contemplated by Affirmer's express Statement of Purpose. Public License Fallback. Should any part of the Waiver for any reason be judged legally invalid or ineffective under applicable law, then the Waiver shall be preserved to the maximum extent permitted taking into account Affirmer's express Statement of Purpose. In addition, to the extent the Waiver is so judged Affirmer hereby grants to each affected person a royalty-free, non transferable, non sublicensable, non exclusive, irrevocable and unconditional license to exercise Affirmer's Copyright and Related Rights in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"License\"). The License shall be deemed effective as of the date CC0 was applied by Affirmer to the Work. Should any part of the License for any reason be judged legally invalid or ineffective under applicable law, such partial invalidity or ineffectiveness shall not invalidate the remainder of the License, and in such case Affirmer hereby affirms that he or she will not (i) exercise any of his or her remaining Copyright and Related Rights in the Work or (ii) assert any associated claims and causes of action with respect to the Work, in either case contrary to Affirmer's express Statement of Purpose. Limitations and Disclaimers. a. No trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document. b. Affirmer offers the Work as-is and makes no representations or warranties of any kind concerning the Work, express, implied, statutory or otherwise, including without limitation warranties of title, merchantability, fitness for a particular purpose, non infringement, or the absence of latent or other defects, accuracy, or the present or absence of errors, whether or not discoverable, all to the greatest extent permissible under applicable law. c. Affirmer disclaims responsibility for clearing rights of other persons that may apply to the Work or any use thereof, including without limitation any person's Copyright and Related Rights in the Work. Further, Affirmer disclaims responsibility for obtaining any necessary consents, permissions or other rights required for any use of the Work. d. Affirmer understands and acknowledges that Creative Commons is not a party to this document and has no duty or obligation with respect to this CC0 or use of the Work.","title":"Creative Commons Legal Code"},{"location":"license/#creative-commons-legal-code","text":"","title":"Creative Commons Legal Code"},{"location":"license/#cc0-10-universal","text":"CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED HEREUNDER.","title":"CC0 1.0 Universal"},{"location":"license/#statement-of-purpose","text":"The laws of most jurisdictions throughout the world automatically confer exclusive Copyright and Related Rights (defined below) upon the creator and subsequent owner(s) (each and all, an \"owner\") of an original work of authorship and/or a database (each, a \"Work\"). Certain owners wish to permanently relinquish those rights to a Work for the purpose of contributing to a commons of creative, cultural and scientific works (\"Commons\") that the public can reliably and without fear of later claims of infringement build upon, modify, incorporate in other works, reuse and redistribute as freely as possible in any form whatsoever and for any purposes, including without limitation commercial purposes. These owners may contribute to the Commons to promote the ideal of a free culture and the further production of creative, cultural and scientific works, or to gain reputation or greater distribution for their Work in part through the use and efforts of others. For these and/or other purposes and motivations, and without any expectation of additional consideration or compensation, the person associating CC0 with a Work (the \"Affirmer\"), to the extent that he or she is an owner of Copyright and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and publicly distribute the Work under its terms, with knowledge of his or her Copyright and Related Rights in the Work and the meaning and intended legal effect of CC0 on those rights. Copyright and Related Rights. A Work made available under CC0 may be protected by copyright and related or neighboring rights (\"Copyright and Related Rights\"). Copyright and Related Rights include, but are not limited to, the following: i. the right to reproduce, adapt, distribute, perform, display, communicate, and translate a Work; ii. moral rights retained by the original author(s) and/or performer(s); iii. publicity and privacy rights pertaining to a person's image or likeness depicted in a Work; iv. rights protecting against unfair competition in regards to a Work, subject to the limitations in paragraph 4(a), below; v. rights protecting the extraction, dissemination, use and reuse of data in a Work; vi. database rights (such as those arising under Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, and under any national implementation thereof, including any amended or successor version of such directive); and vii. other similar, equivalent or corresponding rights throughout the world based on applicable law or treaty, and any national implementations thereof. Waiver. To the greatest extent permitted by, but not in contravention of, applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and unconditionally waives, abandons, and surrenders all of Affirmer's Copyright and Related Rights and associated claims and causes of action, whether now known or unknown (including existing as well as future claims and causes of action), in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each member of the public at large and to the detriment of Affirmer's heirs and successors, fully intending that such Waiver shall not be subject to revocation, rescission, cancellation, termination, or any other legal or equitable action to disrupt the quiet enjoyment of the Work by the public as contemplated by Affirmer's express Statement of Purpose. Public License Fallback. Should any part of the Waiver for any reason be judged legally invalid or ineffective under applicable law, then the Waiver shall be preserved to the maximum extent permitted taking into account Affirmer's express Statement of Purpose. In addition, to the extent the Waiver is so judged Affirmer hereby grants to each affected person a royalty-free, non transferable, non sublicensable, non exclusive, irrevocable and unconditional license to exercise Affirmer's Copyright and Related Rights in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"License\"). The License shall be deemed effective as of the date CC0 was applied by Affirmer to the Work. Should any part of the License for any reason be judged legally invalid or ineffective under applicable law, such partial invalidity or ineffectiveness shall not invalidate the remainder of the License, and in such case Affirmer hereby affirms that he or she will not (i) exercise any of his or her remaining Copyright and Related Rights in the Work or (ii) assert any associated claims and causes of action with respect to the Work, in either case contrary to Affirmer's express Statement of Purpose. Limitations and Disclaimers. a. No trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document. b. Affirmer offers the Work as-is and makes no representations or warranties of any kind concerning the Work, express, implied, statutory or otherwise, including without limitation warranties of title, merchantability, fitness for a particular purpose, non infringement, or the absence of latent or other defects, accuracy, or the present or absence of errors, whether or not discoverable, all to the greatest extent permissible under applicable law. c. Affirmer disclaims responsibility for clearing rights of other persons that may apply to the Work or any use thereof, including without limitation any person's Copyright and Related Rights in the Work. Further, Affirmer disclaims responsibility for obtaining any necessary consents, permissions or other rights required for any use of the Work. d. Affirmer understands and acknowledges that Creative Commons is not a party to this document and has no duty or obligation with respect to this CC0 or use of the Work.","title":"Statement of Purpose"},{"location":"outputs/","text":"\ud83d\udce4 outputs \u2042 the x post action provides the following output: output description post-id the id of the post using the post-id output \u2042 the post-id output can be used in subsequent steps of your workflow to reference the created post. example: accessing the post-id \u2042 jobs: post: runs-on: ubuntu-latest steps: - name: post to x id: x_post uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'new release!' - name: use post id run: | echo \"post created with id: ${{ steps.x_post.outputs.post-id }}\" # use the post id for other operations potential uses \u2042 link to the post from other platforms track engagement metrics for the post add the post to twitter lists reference the post in subsequent api calls","title":"outputs"},{"location":"outputs/#outputs","text":"the x post action provides the following output: output description post-id the id of the post","title":"\ud83d\udce4 outputs"},{"location":"outputs/#using-the-post-id-output","text":"the post-id output can be used in subsequent steps of your workflow to reference the created post.","title":"using the post-id output"},{"location":"outputs/#example-accessing-the-post-id","text":"jobs: post: runs-on: ubuntu-latest steps: - name: post to x id: x_post uses: captradeoff/x-post-action@v1 with: appKey: ${{ secrets.X_APP_KEY }} appSecret: ${{ secrets.X_APP_SECRET }} accessToken: ${{ secrets.X_ACCESS_TOKEN }} accessSecret: ${{ secrets.X_ACCESS_SECRET }} message: 'new release!' - name: use post id run: | echo \"post created with id: ${{ steps.x_post.outputs.post-id }}\" # use the post id for other operations","title":"example: accessing the post-id"},{"location":"outputs/#potential-uses","text":"link to the post from other platforms track engagement metrics for the post add the post to twitter lists reference the post in subsequent api calls","title":"potential uses"},{"location":"development/contributing/","text":"\ud83e\udd1d contributing \u2042 contributions are welcome! this page explains how you can help improve the x post action. ways to contribute \u2042 there are many ways to contribute to this project: report bugs and suggest features through issues fix bugs and implement new features improve documentation write tests share the project with others contribution workflow \u2042 fork the repository : click the fork button at the top of the repository page create a feature branch : git checkout -b feature/your-feature-name make your changes : implement your feature or fix write or update tests : ensure your code is well-tested ensure tests pass : run npm test to make sure everything works build the action : run npm run build to update the dist folder commit your changes : git commit -m 'add some feature' push to the branch : git push origin feature/your-feature-name open a pull request : go to your fork on github and click the 'new pull request' button pull request guidelines \u2042 when submitting a pull request: fill in the required template add a clear title and description reference any relevant issues include screenshots and animated gifs if appropriate ensure all tests are passing make sure you've built the action with npm run build code style \u2042 please make sure your code follows the project's coding style: use camelCase for variable and function names include jsdoc comments for functions keep functions small and focused use meaningful variable names add appropriate error handling \u2b50 supporting the project \u2042 if you find this project useful, please consider: \u2b50 starring the repository on github \ud83d\udd04 forking the repository to contribute \ud83d\udce2 sharing the project with others who might find it helpful \ud83d\udc1b reporting bugs or suggesting features through issues \ud83d\udcbb submitting pull requests to improve the code or documentation your support helps maintain and improve this project!","title":"contributing"},{"location":"development/contributing/#contributing","text":"contributions are welcome! this page explains how you can help improve the x post action.","title":"\ud83e\udd1d contributing"},{"location":"development/contributing/#ways-to-contribute","text":"there are many ways to contribute to this project: report bugs and suggest features through issues fix bugs and implement new features improve documentation write tests share the project with others","title":"ways to contribute"},{"location":"development/contributing/#contribution-workflow","text":"fork the repository : click the fork button at the top of the repository page create a feature branch : git checkout -b feature/your-feature-name make your changes : implement your feature or fix write or update tests : ensure your code is well-tested ensure tests pass : run npm test to make sure everything works build the action : run npm run build to update the dist folder commit your changes : git commit -m 'add some feature' push to the branch : git push origin feature/your-feature-name open a pull request : go to your fork on github and click the 'new pull request' button","title":"contribution workflow"},{"location":"development/contributing/#pull-request-guidelines","text":"when submitting a pull request: fill in the required template add a clear title and description reference any relevant issues include screenshots and animated gifs if appropriate ensure all tests are passing make sure you've built the action with npm run build","title":"pull request guidelines"},{"location":"development/contributing/#code-style","text":"please make sure your code follows the project's coding style: use camelCase for variable and function names include jsdoc comments for functions keep functions small and focused use meaningful variable names add appropriate error handling","title":"code style"},{"location":"development/contributing/#supporting-the-project","text":"if you find this project useful, please consider: \u2b50 starring the repository on github \ud83d\udd04 forking the repository to contribute \ud83d\udce2 sharing the project with others who might find it helpful \ud83d\udc1b reporting bugs or suggesting features through issues \ud83d\udcbb submitting pull requests to improve the code or documentation your support helps maintain and improve this project!","title":"\u2b50 supporting the project"},{"location":"development/getting-started/","text":"\ud83d\udcbb development \u2042 this project uses node.js and the twitter api v2 client. prerequisites \u2042 before you begin, ensure you have: node.js (v20 recommended) npm git x developer account and api credentials setting up local development \u2042 clone the repository: bash git clone https://github.com/captradeoff/x-post-action.git cd x-post-action install dependencies: bash npm install for testing with actual api calls, create a .env file: bash cp .env.sample .env edit the .env file to add your x api credentials project structure \u2042 index.js : main entry point action.yaml : github action definition index.test.js : unit tests integration.test.js : api integration tests integration-action.test.js : action function tests dist/ : compiled action code building the action \u2042 the action uses @vercel/ncc to compile the node.js code and dependencies into a single file: npm run build this will create a dist/index.js file that is referenced in action.yaml . development workflow \u2042 make changes to the code update or add tests to cover your changes run tests to ensure everything works: bash npm test build the action: bash npm run build commit and push your changes create a pull request","title":"getting started"},{"location":"development/getting-started/#development","text":"this project uses node.js and the twitter api v2 client.","title":"\ud83d\udcbb development"},{"location":"development/getting-started/#prerequisites","text":"before you begin, ensure you have: node.js (v20 recommended) npm git x developer account and api credentials","title":"prerequisites"},{"location":"development/getting-started/#setting-up-local-development","text":"clone the repository: bash git clone https://github.com/captradeoff/x-post-action.git cd x-post-action install dependencies: bash npm install for testing with actual api calls, create a .env file: bash cp .env.sample .env edit the .env file to add your x api credentials","title":"setting up local development"},{"location":"development/getting-started/#project-structure","text":"index.js : main entry point action.yaml : github action definition index.test.js : unit tests integration.test.js : api integration tests integration-action.test.js : action function tests dist/ : compiled action code","title":"project structure"},{"location":"development/getting-started/#building-the-action","text":"the action uses @vercel/ncc to compile the node.js code and dependencies into a single file: npm run build this will create a dist/index.js file that is referenced in action.yaml .","title":"building the action"},{"location":"development/getting-started/#development-workflow","text":"make changes to the code update or add tests to cover your changes run tests to ensure everything works: bash npm test build the action: bash npm run build commit and push your changes create a pull request","title":"development workflow"},{"location":"development/testing/","text":"testing \u2042 this project uses jest for testing with both unit tests and integration tests. unit tests \u2042 the unit tests mock the twitter api and github actions core module to verify functionality without making actual api calls. to run the unit tests: npm test this will run all test files matching *.test.js in the project root. coverage report is generated automatically when running the tests. you can view the html coverage report in the coverage directory. integration tests \u2042 integration tests make actual calls to the x api to verify real-world functionality. setup for integration tests \u2042 copy the .env.sample file to .env and fill in with your x api credentials: bash cp .env.sample .env edit the .env file and replace placeholders with your actual api keys and tokens: X_APP_KEY=your_actual_app_key X_APP_SECRET=your_actual_app_secret X_ACCESS_TOKEN=your_actual_access_token X_ACCESS_SECRET=your_actual_access_secret running integration tests \u2042 there are several integration test scripts available: # run direct api integration test npm run test:integration # run action function integration test npm run test:integration-action # run all integration tests npm run test:integration-all integration test details \u2042 the integration tests include: direct api test : tests the x api directly using credentials from .env action function test : tests the postTweet function exported from index.js both tests will: - post actual tweets to your x account - include extensive logging for debugging - skip tests automatically if environment variables aren't set - add a timestamp to make each test message unique note: be careful with integration tests as they make real api calls and will post actual tweets to your account.","title":"testing"},{"location":"development/testing/#testing","text":"this project uses jest for testing with both unit tests and integration tests.","title":"testing"},{"location":"development/testing/#unit-tests","text":"the unit tests mock the twitter api and github actions core module to verify functionality without making actual api calls. to run the unit tests: npm test this will run all test files matching *.test.js in the project root. coverage report is generated automatically when running the tests. you can view the html coverage report in the coverage directory.","title":"unit tests"},{"location":"development/testing/#integration-tests","text":"integration tests make actual calls to the x api to verify real-world functionality.","title":"integration tests"},{"location":"development/testing/#setup-for-integration-tests","text":"copy the .env.sample file to .env and fill in with your x api credentials: bash cp .env.sample .env edit the .env file and replace placeholders with your actual api keys and tokens: X_APP_KEY=your_actual_app_key X_APP_SECRET=your_actual_app_secret X_ACCESS_TOKEN=your_actual_access_token X_ACCESS_SECRET=your_actual_access_secret","title":"setup for integration tests"},{"location":"development/testing/#running-integration-tests","text":"there are several integration test scripts available: # run direct api integration test npm run test:integration # run action function integration test npm run test:integration-action # run all integration tests npm run test:integration-all","title":"running integration tests"},{"location":"development/testing/#integration-test-details","text":"the integration tests include: direct api test : tests the x api directly using credentials from .env action function test : tests the postTweet function exported from index.js both tests will: - post actual tweets to your x account - include extensive logging for debugging - skip tests automatically if environment variables aren't set - add a timestamp to make each test message unique note: be careful with integration tests as they make real api calls and will post actual tweets to your account.","title":"integration test details"}]}